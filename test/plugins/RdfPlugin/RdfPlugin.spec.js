/*jshint node:true, mocha:true*/
/**
 * Generated by PluginGenerator 1.7.0 from webgme on Tue Apr 25 2017 09:54:17 GMT-0500 (Central Daylight Time).
 */

'use strict';
var testFixture = require('../../globals');

const SEED_DIR = require('path').join(__dirname, '..', '..', '..', 'models');


describe('RdfPlugin', function () {
    var gmeConfig = testFixture.getGmeConfig(),
        expect = testFixture.expect,
        logger = testFixture.logger.fork('RdfPlugin'),
        PluginCliManager = testFixture.WebGME.PluginCliManager,
        projectName = 'testProject',
        pluginName = 'RdfPlugin',
        project,
        gmeAuth,
        storage,
        commitHash;

    before(function (done) {
        testFixture.clearDBAndGetGMEAuth(gmeConfig, projectName)
            .then(function (gmeAuth_) {
                gmeAuth = gmeAuth_;
                // This uses in memory storage. Use testFixture.getMongoStorage to persist test to database.
                storage = testFixture.getMemoryStorage(logger, gmeConfig, gmeAuth);
                return storage.openDatabase();
            })
            .then(function () {
                var importParam = {
                    projectSeed: testFixture.path.join(SEED_DIR, 'Test1.webgmex'),
                    projectName: projectName,
                    branchName: 'master',
                    logger: logger,
                    gmeConfig: gmeConfig
                };

                return testFixture.importProject(storage, importParam);
            })
            .then(function (importResult) {
                project = importResult.project;
                commitHash = importResult.commitHash;
                return project.createBranch('test', commitHash);
            })
            .nodeify(done);
    });

    after(function (done) {
        storage.closeDatabase()
            .then(function () {
                return gmeAuth.unload();
            })
            .nodeify(done);
    });

    it('should run plugin and produce some output', function (done) {
        // virtuoso can take a long time
        this.timeout(15000);

        var manager = new PluginCliManager(null, logger, gmeConfig),
            pluginConfig = {
                // RdfServerUrl: "http://localhost:9999"
            },
            context = {
                project: project,
                commitHash: commitHash,
                branchName: 'test',
                activeNode: '/1',
            };

        var q = require('q')
        q.nfcall(manager.executePlugin, pluginName, pluginConfig, context)
            .then(function (pluginResult) {
                const rdf = pluginResult.messages[0].message;

                // require('fs').writeFileSync('debug.ttl', rdf)

                expect(typeof pluginResult).to.equal('object');
                expect(pluginResult.success).to.equal(true);

                expect(rdf).to.contain('this:FCO__name rdf:type rdf:property');
                expect(rdf).to.contain('this:Connection__dst rdf:type rdf:property');
                expect(rdf).to.contain('this:node__k_s this:Connection__dst this:node__k_F');
                expect(rdf).to.contain('this:Class__ClassAttr <http://example.com/this_is_a&uri?true> .');

                project.getBranchHash('test')
                    .then(function (branchHash) {
                        expect(branchHash).to.equal(commitHash);
                    });
            })
            .then(done)
            .catch(done);
    });
});
